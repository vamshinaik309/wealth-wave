# Cognito Details
COGNITO_USER_POOL_ID = 'us-east-1_92fhsj2cM'
COGNITO_APP_CLIENT_ID = '33d5l6ooqfg4jnrohkv7r60sm9'
COGNITO_REGION = 'us-east-1'
COGNITO_DOMAIN = 'https://wealth-wave.auth.us-east-1.amazoncognito.com'
REDIRECT_URI = 'http://localhost:5000/home'  # Callback URL after login

# Initialize Cognito client
cognito_client = boto3.client('cognito-idp', region_name=COGNITO_REGION)



<!DOCTYPE html>
{% extends 'base.html' %}

{% block title %}Analytics{% endblock %}

{% block content %}
    <h1> Analytic page content</h1>
    <h3>Your UserID  is  {{ user_id }}</h3>
    <h2>{{api_data}}</h2>
{% endblock %}


-------------------------------------------------
userfulldetails lambda

{
    "body": "{\"user_id\": \"3698229b-6393-4ef1-98b6-344602994745\"}"
}
  
https://qqhx04wws7.execute-api.us-east-1.amazonaws.com/stage1/home/UserFullDetailsApi

import boto3
from boto3.dynamodb.conditions import Key
import json

def lambda_handler(event, context):
    print(event)
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('UserBills')  # Your DynamoDB table name

    # Parse incoming data
    data = json.loads(event['body'])
    user_id = data['user_id']

    # Query DynamoDB to get the last 10 items
    response = table.query(
        KeyConditionExpression=Key('user_id').eq(user_id),
        ScanIndexForward=False,  # Set to False for descending order (assuming timestamp is used for sorting)
        # IndexName='your_index_name'  # Optional: If you're using a global secondary index
    )

    # Extract last 10 items
    last_10_items = response.get('Items', [])

    # Prepare the response
    response_body = {
        'statusCode': 200,
        'body': json.dumps(last_10_items)
    }

    return response_body
  
    --------------------------------------------------------------resolved below----
    import boto3
from boto3.dynamodb.conditions import Key
import json
from decimal import Decimal

class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Decimal):
            if o % 1 > 0:
                return float(o)
            else:
                return int(o)
        return super(DecimalEncoder, self).default(o)

def lambda_handler(event, context):
    print(event)
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('UserBills')  # Your DynamoDB table name

    # Parse incoming data
    data = json.loads(event['body'])
    user_id = data['user_id']

    # Query DynamoDB to get the last 10 items
    response = table.query(
        KeyConditionExpression=Key('user_id').eq(user_id),
        ScanIndexForward=False,  # Set to False for descending order (assuming timestamp is used for sorting)
        # IndexName='your_index_name'  # Optional: If you're using a global secondary index
    )

    # Extract last 10 items
    last_10_items = response.get('Items', [])

    # Prepare the response using the custom encoder
    response_body = {
        'statusCode': 200,
        'body': json.dumps(last_10_items, cls=DecimalEncoder)
    }

    return response_body
------------------------------------------------------------
import boto3
from boto3.dynamodb.conditions import Key
import json

def lambda_handler(event, context):
    print(event)
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table('UserBills')  # Your DynamoDB table name

    # Parse incoming data
    data = json.loads(event['body'])
    user_id = data['user_id']

    # Query DynamoDB to get the last 10 items
    response = table.query(
        KeyConditionExpression=Key('user_id').eq(user_id),
        Limit=10,
        ScanIndexForward=False,  # Set to False for descending order (assuming timestamp is used for sorting)
        # IndexName='your_index_name'  # Optional: If you're using a global secondary index
    )

    # Extract last 10 items
    last_10_items = response.get('Items', [])

    # Prepare the response
    response_body = {
        'statusCode': 200,
        'body': json.dumps(last_10_items)
    }

    return response_body


    ---------------------------------------------------